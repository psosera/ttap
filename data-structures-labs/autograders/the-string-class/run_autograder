#!/usr/bin/env python3

import json
from os import chdir, getcwd
from os.path import exists, join
from shutil import copytree
from subprocess import PIPE, run, STDOUT
from sys import exit

def required_file_test(path, root='submission'):
    file_exists = exists(join(root, path))
    return {
        'name': f'Required file {path} present?',
        'status': 'success' if file_exists else 'failed',
        'output': '' if file_exists else f'{path} not found at: {root}'
    }

def project_compiles_only_test(name, project_path, additional_args=[]):
    pwd = getcwd()
    chdir(project_path)
    result  = run(['mvn', 'compile', '-q'] + additional_args, stdout=PIPE, stderr=STDOUT)
    success = result.returncode == 0
    chdir(pwd)
    return {
        'name': f'{name} compiles?',
        'status': 'success' if success else 'failed',
        'output': '' if success else result.stdout.decode('utf-8')
    }

################################################################################

required_tests = [
    required_file_test('StringExercises'),
    required_file_test('StringExercises.java', root=join('submission', 'StringExercises', 'src', 'main', 'java', 'edu', 'grinnell', 'csc207', 'stringexercises')),
    required_file_test('README.md', root=join('submission', 'StringExercises')),
    project_compiles_only_test('StringExercises', join('submission', 'StringExercises'))
]

all_required_tests_pass = all([t['status'] == 'success' for t in required_tests])

output = {
    'score': 1.0 if all_required_tests_pass else 0.0,
    'tests': required_tests
}

with open(join('results', 'results.json'), 'w') as f:
    f.write(json.dumps(output))