#!/usr/bin/env python3

import json
from os import chdir, getcwd, makedirs, rename
from os.path import exists, join
from shutil import copytree
from subprocess import PIPE, run, STDOUT
from sys import exit

def required_file_test(path, root='submission'):
    file_exists = exists(join(root, path))
    return {
        'name': f'Required file {path} present?',
        'status': 'success' if file_exists else 'failed',
        'output': '' if file_exists else f'{path} not found at: {root}'
    }

def project_compiles_only_test(name, project_path, additional_args=[]):
    pwd = getcwd()
    chdir(project_path)

    # N.B., hack to fix project turn-ins! It appears that uploading a folder
    # flattens the entire directory structure... but we needed that! The
    # hacky fix for now is to recreate it for the one java file in question...
    makedirs(join('src', 'main', 'java', 'edu', 'grinnell', 'csc207', 'stringexercises'))
    rename('StringExercises.java', join('src', 'main', 'java', 'edu', 'grinnell', 'csc207', 'stringexercises', 'StringExercises.java'))

    result  = run(['mvn', 'compile', '-q'] + additional_args, stdout=PIPE, stderr=STDOUT)
    success = result.returncode == 0
    chdir(pwd)
    return {
        'name': f'{name} compiles?',
        'status': 'success' if success else 'failed',
        'output': '' if success else result.stdout.decode('utf-8')
    }

################################################################################

required_tests = [
    required_file_test('StringExercises.java', root='submission'),
    required_file_test('pom.xml', root='submission'),
    required_file_test('README.md', root='submission'),
    project_compiles_only_test('StringExercises', 'submission')
]

all_required_tests_pass = all([t['status'] == 'success' for t in required_tests])

output = {
    'score': 1.0 if all_required_tests_pass else 0.0,
    'tests': required_tests
}

with open(join('results', 'results.json'), 'w') as f:
    f.write(json.dumps(output))
