#!/usr/bin/env python3

import json
from os import chdir, getcwd, makedirs, rename
from os.path import basename, exists, join
from shutil import copytree
from subprocess import PIPE, run, STDOUT
from sys import exit

def required_file_test(path, root='submission'):
    filename = basename(path)
    file_exists = exists(join(root, path))
    return {
        'name': f'Required file {filename} present?',
        'status': 'success' if file_exists else 'failed',
        'output': '' if file_exists else f'{path} not found in submission'
    }

TEST_DIR = 'autograder-project'

def maven_autograder_test(project_path):
    copytree(join('submission', project_path), TEST_DIR, dirs_exist_ok=True)
    copytree(join('source', 'tester'), TEST_DIR, dirs_exist_ok=True)
    pwd = getcwd()
    chdir(TEST_DIR)
    result  = run(['mvn', 'compile', 'exec:java', '-q'], stdout=PIPE, stderr=STDOUT)
    success = result.returncode == 0
    output  = result.stdout.decode('utf-8')
    if success:
        chdir(pwd)
        return json.loads(output)
    else:
        chdir(pwd)
        return [{
            'name': 'Project compiles?',
            'status': 'failed',
            'output': output
        }]

################################################################################

project_dir = 'SpeedReader'

def project_path(file):
    return join(project_dir, file)

def package_path(file):
    return join(project_dir, 'src', 'main', 'java', 'edu', 'grinnell', 'csc207', 'speedreader', file)

required_files_tests = [
    required_file_test(project_path('pom.xml')),
    required_file_test(project_path('README.md')),
    required_file_test(package_path('DrawingPanel.java')),
    required_file_test(package_path('SpeedReader.java')),
    required_file_test(package_path('WordGenerator.java'))
]

autograder_tests = []

if all(t['status'] == 'success' for t in required_files_tests):
    autograder_tests = maven_autograder_test(project_dir)

output = {
    'score': 0.0,
    'tests': required_files_tests + autograder_tests
}

makedirs('results', exist_ok=True)
with open(join('results', 'results.json'), 'w') as f:
    f.write(json.dumps(output))
